{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1>Report</h1>

<div class="profile-section">
    <h1 id="kmom01">Kmom01</h1>
    <h4>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h4>
    <p>
        Jag har jobbat med objektorientering tidigare i Python. Jag känner till grunder som klasser,
        objekt och arv, men det var bra att fräscha upp allt igen nu i början av kursen.
    </p>

    <h4>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h4>
    <p>
        PHP fungerar som andra språk när det gäller klasser och objekt.
        Man skapar en klass med class, använder new för att skapa objekt och kan
        använda __construct() för att starta upp värden.
    </p>

    <h4>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h4>
    <p>
        Strukturen i me/report känns ganska tydlig efter att man vant sig. Symfony har många mappar och filer,
        men det känns ändå logiskt när man lär sig hur routing, controllers och templates fungerar tillsammans. 
        Jag gillar att det är uppdelat på detta vis.
    </p>

    <h4>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h4>
    <p>
        Jag tyckte artikeln PHP The Right Way var bra. Den gav en tydlig överblick över moderna verktyg och tekniker i PHP. 
        Jag tyctke det var intressant för hur Composer används för att hantera paket och beroenden.
        Jag blev också nyfiken på dependency injection då det verkar vara viktigt 
        i ramverk som Symfony.
    </p>

    <h4>Vilken är din TIL för detta kmom?</h4>
    <p>
        TIL – Jag lärde mig hur Symfony skapar routes automatiskt. Det var lite förvirrande i början eftersom mycket händer automatiskt, men nu börjar jag förstå hur det hänger ihop.
    </p>



    <h1 id="kmom02">Kmom02</h1>
    <h4>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h5>
    <p>I PHP används arv för att en klass ska kunna återanvända kod från en annan klass. En underklass ärver egenskaper och metoder från en basklass.
        Komposition innebär att en klass innehåller instanser av andra klasser. Istället för att ärva funktionalitet skapas objekt som bygger en annan klass.
        Det är ett sätt att återanvända kod utan att använda arv.
        Ett interface är som ett avtal. Det säger vilka metoder en klass måste ha, men inte hur de ska fungera.
        En trait är ett sätt att dela kod mellan flera klasser.
    </p>


    <h4>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h5>
    <p>Jag är nöjd med hur min implementation blev. Det var en intressant uppgift där jag fick testa att bygga upp flera egna klasser och controllers. Jag tyckte det var kul att jobba med kortlekslogiken och att spara och hämta datan via sessionen.
    Jag stötte dock på lite problem när det gällde att förstå hur POST-requestarna skulle fungera. Först trodde jag att man skulle kunna testa alla API-routes direkt via URL:en, men sen förstod jag att jag behövde använda formulär eller knappar som skickar POST, vilket jaglöste genom att skapa knappar i min API-landningssida.
    En förbättring jag skulle kunna göra är i min CSS. Jag har återanvänt mycket av samma kod och det känns som att jag skulle kunna strukturera om klasserna bättre.
    Överlag är jag nöjd med slutresultatet och det gav mig bättre förståelse för både objektorientering och hur man hanterar API:er i Symfony.</p>

    <h4>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h5>
    <p>Jag tycker att det är både effektivt och intressant att jobba i Symfony och med applikationskod enligt MVC-arkitekturen. 
    Symfony erbjuder en bra struktur som gör det lätt att hålla koden organiserad men även skalbar. Jag har förstått principerna bakom MVC ganska snabbt, och det känns logiskt att dela upp koden i modeller, vyer och kontroller.</p>


    <h4>Vilken är din TIL för detta kmom?</h5>
    <p>Den största lärdomen för mig i detta kursmoment har varit att utöka min förståelse för hur Symfony fungerar gällande templates,
    controllers och sessioner. Jag har blivit mycket mer bekväm med att skapa och använda controllers för att hantera olika rutter och hur man 
    strukturerar dessa för att skapa en effektiv applikation.
    Jag har också lärt mig mycket om sessioner och hur de kan användas för att spara och hämta data mellan olika sidor.</p>

    <h1 id="kmom03">Kmom03</h1>
    <h4>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod.
    Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera 
    koden kring en applikation?</h4>
    
    <p>Att jag använde flödesdiagram och pseudokod var hjälpsamt för att få en tydlig översikt över 
    hur spelet skall fungera. Flödesdiagrammet jag skapade gav mig en bra överblick för att förstå 
    stegen i spelet, från att spelaren drar ett kort eller när det är dealerns tur. Pseudokoden 
    hjälpte mig med en överblick över hur funktionalitet möjligtvis kan se ut och gav mig en grund
    att utgå ifrån. Det gjorde det lättare att bryta ner problemen och gjorde så att jag hade en
    bra överblick över strukturen innan jag gick in på detaljnivå.
    </p>

    <h4>Berätta om din implementation från uppgiften. Hur löste du uppgiften,
    är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h4>
    
    <p>Jag började uppgiften med att återanvända klasser från tidigare kursmoment för att 
    effektivisera utvecklingen. Jag använde mig av de klasser jag redan hade skapat, DeckOfCards,
    CardHand och Card, vilket sparade mycket tid och gjorde lösningen mer effektiv.
    För att hantera spelets logik skapade jag en Game-klass som ansvarar för att räkna poäng,
    avgöra vinnaren och dela ut korten. Jag tycker att jag löste uppgiften på ett bra sätt genom 
    att fokusera på spelets grundläggande funktioner och samtidigt återanvända den kod jag redan hade byggt.
    En förbättringspotential jag ser i min implementation är hanteringen av ess i kortleken.
    För tillfället får esset alltid antingen värdet 11 eller 1, beroende på handens totala poäng. 
    Jag tror att det skulle bli mer flexibelt och realistiskt om jag gav spelaren möjlighet att 
    välja mellan 1 eller 11 varje gång ett ess dras. Att göra denna hantering 
    mer dynamisk, med valmöjligheten för spelaren, skulle ge en mer korrekt poänghantering och förbättra 
    spelet.</p>

    <h4>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h4>

    <p>Jag har faktiskt fått en bra känsla att arbeta med Symfony, det ger en bra struktur vilket gör det lätt att bygga applikationer.
    Jag tycker det är jättesmidigt hur man använder routing, session och twig för att skapa en strukturerad och bra applikation.
    Tycker även det är bra att man kan dela in routes in olika controllers.</p>

    <h4>Vilken är din TIL för detta kmom?</h4>
    
    <p>
    Denna veckans TIL är att jag fått en bättre överblick hur man kan använda sig av flödesdiagram och pseudokod för att få en bra grundstruktur innan man påbörjar utveckla kod.
    Jag tycker att det är en bra grund och tankeställare att ha innan man påbörjar att utveckla en applikation eftersom man har en grund att vända sig till.
    </p>

    <h1 id="kmom04">Kmom04</h1> 
    
    <h4>Berätta hur du upplevde att skriva kod som testar annan kod med 
    PHPUnit och hur du upplever phpunit rent allmänt.</h4>

    <p> Jag tyckte det var intressant upplevelse att använda PHPUnit för att testa min egen kod. 
    Jag tyckte det var intressant att skriva testerna efter att funktionaliteten var skapad. Så som jag upplever
    PHPUnit är att det upplevs som ett kraftfullt verktyg och när man väl kommit in i tänket känns det ganska
    naturligt att skriva tester. </p>

    <h4>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h4> 

    <p>Jag lyckades nå 100% kodtäckning i hela projektet, inklusive alla klasser i Card-mappen:
    Card.php, CardGraphic.php, CardHand.php, 
    DeckOfCards.php och DeckOfGraphicCards.php, men även 
    Game klassen. Jag skrev tester som täckte funktionaliteten i klasserna.
    Varenda metod testades, vilket också sedan visades på testresultaten som visar 100% coverage på alla klasser som har med spelet att göra.</p>


    <h4>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer
    eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h4>

    <p>Jag tycker att större delen av min kod är ganska testbar, detta genom att jag försökte hålla mina metoder
    små och fokuserade. Det gjorde det lättare för mig att skriva tester. 
    Jag behövde inte skriva om någon kod för att kunna testa den, vilket jag 
    är possitivt då det kan ses som ett tecken på att strukturen från början var väl genomtänkt. </p>


    <h4>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h4>
    <p>Nej, jag behövde inte skriva om någon funktionalitet i min kod för att kunna testa den.
    Jag tyckte det var skönt att inte behöva ändra i koden utan kunde nå 100% coverage med mina tester utan några större justeringar.
    </p>

    <h4>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h4>
    <p>
    Ja, jag tycker att testbar kod ofta hänger ihop med snygg och ren kod. 
    När koden är uppdelad i små delar, blir den både lättare 
    att förstå och att testa. Om jag enkelt kan skriva tester utan att ändra på 
    koden, känns det som ett tecken på att den är bra strukturerad från början. 
    </p>

    <h4>Vilken är din TIL för detta kmom?</h4>
    <p>
    Mitt TIL för detta kursmoment är att jag har fått en bättre förståelse 
    för hur man skriver testfall och hur viktigt det är att tänka på testbarhet 
    redan när man skriver koden. Det gör det både lättare att hitta fel och att
    skriva renare kod från början. 
    </p>

    <h1 id="kmom05">Kmom05</h1>
    <h4>Gick det bra att jobba igenom övningen med Symfony och Doctrine?</h4>
    <p>Ja, det gick bra. Det var lite nytt i början, men man kom snabbt in i det.
    Jag tyckte att det var bra hjälp att jobba igenom övningen först då man fick en bra struktur över hur det fungerar.
    Jag tyckte att detta kursmoment var ganska enkelt och gick rätt så snabbt.
    </p>

    <h4>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h4>
    <p>Jag byggde ett bibliotek där man kan se, lägga till, uppdatera och ta bort böcker.
    Jag försökte göra gränssnittet så tydligt och enkelt som möjligt, med länkar mellan sidorna
    så att det ser fräscht ut.
    </p>

    <h4>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</h4>
    <p>Ja, det var smidigt att använda ORM. Det är enklare än att skriva SQL själv, 
    och man slipper tänka på tabeller så mycket.</p>

    <h4>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h4>
    <p>ORM gör det lättare att jobba med databasen i kod, särskilt för CRUD då man ska spara, ta bort, uppdatera och läsa. 
    Det känns mer organiserat än att blanda in SQL direkt.</p>

    <h4>Vilken är din TIL för detta kmom?</h4>
    <p>Jag lärde mig hur man bygger en CRUD-applikation med Symfony och Doctrine. 
    Jag har också lärt mig mer om hur ORM fungerar.
    </p>
    
    <h1 id="kmom06">Kmom06</h1>
    <p>
    </p>

    <h1 id="kmom10">Kmom10</h1>
    <p>
    </p>
</div>
{% endblock %}
