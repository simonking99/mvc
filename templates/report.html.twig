{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1>Report</h1>

<div class="profile-section">
    <h1 id="kmom01">Kmom01</h1>
    <h4>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h4>
    <p>
        Jag har jobbat med objektorientering tidigare i Python. Jag känner till grunder som klasser,
        objekt och arv, men det var bra att fräscha upp allt igen nu i början av kursen.
    </p>

    <h4>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h4>
    <p>
        PHP fungerar som andra språk när det gäller klasser och objekt.
        Man skapar en klass med class, använder new för att skapa objekt och kan
        använda __construct() för att starta upp värden.
    </p>

    <h4>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h4>
    <p>
        Strukturen i me/report känns ganska tydlig efter att man vant sig. Symfony har många mappar och filer,
        men det känns ändå logiskt när man lär sig hur routing, controllers och templates fungerar tillsammans. 
        Jag gillar att det är uppdelat på detta vis.
    </p>

    <h4>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h4>
    <p>
        Jag tyckte artikeln PHP The Right Way var bra. Den gav en tydlig överblick över moderna verktyg och tekniker i PHP. 
        Jag tyctke det var intressant för hur Composer används för att hantera paket och beroenden.
        Jag blev också nyfiken på dependency injection då det verkar vara viktigt 
        i ramverk som Symfony.
    </p>

    <h4>Vilken är din TIL för detta kmom?</h4>
    <p>
        TIL – Jag lärde mig hur Symfony skapar routes automatiskt. Det var lite förvirrande i början eftersom mycket händer automatiskt, men nu börjar jag förstå hur det hänger ihop.
    </p>



    <h1 id="kmom02">Kmom02</h1>
    <h4>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h5>
    <p>I PHP används arv för att en klass ska kunna återanvända kod från en annan klass. En underklass ärver egenskaper och metoder från en basklass.
        Komposition innebär att en klass innehåller instanser av andra klasser. Istället för att ärva funktionalitet skapas objekt som bygger en annan klass.
        Det är ett sätt att återanvända kod utan att använda arv.
        Ett interface är som ett avtal. Det säger vilka metoder en klass måste ha, men inte hur de ska fungera.
        En trait är ett sätt att dela kod mellan flera klasser.
    </p>


    <h4>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h5>
    <p>Jag är nöjd med hur min implementation blev. Det var en intressant uppgift där jag fick testa att bygga upp flera egna klasser och controllers. Jag tyckte det var kul att jobba med kortlekslogiken och att spara och hämta datan via sessionen.
    Jag stötte dock på lite problem när det gällde att förstå hur POST-requestarna skulle fungera. Först trodde jag att man skulle kunna testa alla API-routes direkt via URL:en, men sen förstod jag att jag behövde använda formulär eller knappar som skickar POST, vilket jaglöste genom att skapa knappar i min API-landningssida.
    En förbättring jag skulle kunna göra är i min CSS. Jag har återanvänt mycket av samma kod och det känns som att jag skulle kunna strukturera om klasserna bättre.
    Överlag är jag nöjd med slutresultatet och det gav mig bättre förståelse för både objektorientering och hur man hanterar API:er i Symfony.</p>

    <h4>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h5>
    <p>Jag tycker att det är både effektivt och intressant att jobba i Symfony och med applikationskod enligt MVC-arkitekturen. 
    Symfony erbjuder en bra struktur som gör det lätt att hålla koden organiserad men även skalbar. Jag har förstått principerna bakom MVC ganska snabbt, och det känns logiskt att dela upp koden i modeller, vyer och kontroller.</p>


    <h4>Vilken är din TIL för detta kmom?</h5>
    <p>Den största lärdomen för mig i detta kursmoment har varit att utöka min förståelse för hur Symfony fungerar gällande templates,
    controllers och sessioner. Jag har blivit mycket mer bekväm med att skapa och använda controllers för att hantera olika rutter och hur man 
    strukturerar dessa för att skapa en effektiv applikation.
    Jag har också lärt mig mycket om sessioner och hur de kan användas för att spara och hämta data mellan olika sidor.</p>

    <h1 id="kmom03">Kmom03</h1>
    <p>
    </p>

    <h1 id="kmom04">Kmom04</h1>
    <p>
    </p>

    <h1 id="kmom05">Kmom05</h1>
    <p>
    </p>

    <h1 id="kmom06">Kmom06</h1>
    <p>
    </p>

    <h1 id="kmom10">Kmom10</h1>
    <p>
    </p>
</div>
{% endblock %}
