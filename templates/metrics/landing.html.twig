{% extends 'base.html.twig' %}

{% block title %}Metrics{% endblock %}

{% block body %}
<h1 class="mb-4">Metrics</h1>

<div class="about-columns">
    <div class="about-text">
        <h1>Introduktion</h1>
        <p>
            God kodkvalitet är viktigt för att koden ska vara lätt att 
            underhålla och förstå över tid, även om det inte alltid krävs för 
            att få en webbplats att fungera. För att arbeta mot hög kodkvalitet 
            kan vi använda oss av 6C:
        </p>

        <div class="quality-section">
            <p>
                Codestyle: Handlar om att följa en enhetlig kodstil, vilket gör koden lättare att läsa och förstå.
            </p>
            <p>
                Coverage: Anger hur stor del av koden som är testad med enhetstester. 
                Hög täckning minskar risken för dolda buggar och oväntade fel.
            </p>

            <p>
                Complexity: Mäter hur komplex koden är, till exempel genom att räkna antalet beslutspunkter som if-satser.
                Ju fler beslut, desto mer komplicerad och svårunderhållen blir koden.
            </p>

            <p>
                Cohesion: Visar hur väl metoder i en klass hänger ihop. 
                Hög kohesion innebär att en klass har ett tydligt syfte och är lättare att underhålla.
            </p>

            <p>
                Coupling: Mäter hur beroende olika klasser eller moduler är av varandra. 
                Låg koppling gör det enklare att ändra och utveckla koden utan att påverka andra delar av systemet.
            </p>

            <p>
                CRAP: Kombinerar komplexitet och testtäckning för att hitta riskabla kodområden. 
                Ett högt CRAP-värde betyder att en kodbit både är svår och dåligt testad, vilket ökar risken för fel.
            </p>

        <h1>Phpmetrics</h1>
        <img src="{{ asset('img/metrics.png') }}" alt="Metrics" class="simon">
        <p>Varje fil representeras av en cirkel.
        De tre största röda cirklarna är App/Game/Game, App/Controller/LibraryController och App/Controller/GameController,
        Storleken på cirkeln visar hur komplex koden är, och färgen visar hur lätt eller svår koden är att underhålla. 
        Stora, röda cirklar indikerar kod som både är komplex och svår att underhålla vilket tyder på att dessa bör granskas och förbättras.
        Efter en titt inuti Game klassen så kan man ta slutsatsen att klassen är för stor och gör för mycket.
        Klassen har för många beroenden och blir svår att underhålla. En förbättringsmöjlighet kan var att dela upp klasserna i flera mindre.
        </p>

        <h1>Scrutinizer</h1>
        <img src="{{ asset('img/scrut.png') }}" alt="Metrics" class="simon">
        <p>Efter att ha kopplat mitt repo till Scrutinizer genomfördes en automatisk
        kodanalys som visade mycket god kodkvalitet. Betyget visar 10.00 (Very Good), vilket tyder på att 
        koden håller en hög standard när de gäller struktur, stil och läsbarhet.
        De fanns inga allvarliga varningar kring kodstil vilket betyder att koden är välskriven.
        Dock så visade analysen att testtäckningen låg på 23% vilket är ganska lågt. Det visar att många delar av koden 
        fortfarande inte är testade.</p>
        <p>
        <a href="https://scrutinizer-ci.com/g/simonking99/mvc/?branch=main">
            <img src="https://scrutinizer-ci.com/g/simonking99/mvc/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality" />
        </a>
        <br>
        <a href="https://scrutinizer-ci.com/g/simonking99/mvc/?branch=main">
            <img src="https://scrutinizer-ci.com/g/simonking99/mvc/badges/coverage.png?b=main" alt="Code Coverage" />
        </a>
        <br>
        <a href="https://scrutinizer-ci.com/g/simonking99/mvc/build-status/main">
            <img src="https://scrutinizer-ci.com/g/simonking99/mvc/badges/build.png?b=main" alt="Build Status" />
        </a>

        <h1>Förbättringar</h1>
        <p>
        Efter att jag granskat analysen från Scrutinizer kunde jag identifiera fem 
        kodproblem i projektet. Två av dem finns i LibraryController.php.
        Det första är en ogiltig typdeklaration: klassen ProductRepository används 
        men existerar inte eller är inte korrekt inkluderad, vilket klassificeras som en bugg.
        Det andra är att parametern $request injiceras men aldrig används, vilket leder till 
        onödig kod som bör rensas bort.
        </p>

        <p>
        Ytterligare två problem finns i konfigurationsfilen för php-cs-fixer.
        Där rapporterar Scrutinizer att typerna PhpCsFixer\Finder och PhpCsFixer\Config 
        inte hittas. Detta tyder på att beroenden kanske inte är korrekt installerade 
        eller att autoloading saknas. Dessa fel påverkar både byggprocessen och möjligheten 
        att köra kodformattering automatiskt, och behöver åtgärdas för att säkerställa korrekt verktygsstöd.
        </p>

        <p>
        Utifrån detta fokuserar jag på följande förbättringar:
        </p>
        <ul>
        <li>Ta bort eller ersätta ogiltiga typreferenser i LibraryController.php</li>
        <li>Rensa bort oanvända parametrar</li>
        <li>Felsöka och rätta beroendeproblem i php-cs-fixer-konfigurationen</li>
        <li>Utöka testtäckningen, som ligger på 23 %</li>
        </ul>
        <p>
        Dessa åtgärder är direkt kopplade till flera av 6C-principerna, framför allt
        Codestyle, Complexity, Coverage och CRAP.
        Jag räknar med att åtgärderna både höjer kvaliteten och förenklar framtida underhåll.
        </p>

     </p>

        </div>
    </div>
</div>
{% endblock %}
