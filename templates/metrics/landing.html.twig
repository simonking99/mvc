{% extends 'base.html.twig' %}

{% block title %}Metrics{% endblock %}

{% block body %}
<h1 class="mb-4">Metrics</h1>

<div class="about-columns">
    <div class="about-text">
        <h1>Introduktion</h1>
        <p>
            God kodkvalitet är viktigt för att koden ska vara lätt att 
            underhålla och förstå över tid, även om det inte alltid krävs för 
            att få en webbplats att fungera. För att arbeta mot hög kodkvalitet 
            kan vi använda oss av <strong>"6C"</strong>:
        </p>

        <div class="quality-section">
            <p>
                Codestyle: Handlar om att följa en enhetlig kodstil, vilket gör koden lättare att läsa och förstå.
            </p>
            <p>
                Coverage: Anger hur stor del av koden som är testad med enhetstester. 
                Hög täckning minskar risken för dolda buggar och oväntade fel.
            </p>

            <p>
                Complexity: Mäter hur komplex koden är, till exempel genom att räkna antalet beslutspunkter som if-satser.
                Ju fler beslut, desto mer komplicerad och svårunderhållen blir koden.
            </p>

            <p>
                Cohesion: Visar hur väl metoder i en klass hänger ihop. 
                Hög kohesion innebär att en klass har ett tydligt syfte och är lättare att underhålla.
            </p>

            <p>
                Coupling: Mäter hur beroende olika klasser eller moduler är av varandra. 
                Låg koppling gör det enklare att ändra och utveckla koden utan att påverka andra delar av systemet.
            </p>

            <p>
                CRAP: Kombinerar komplexitet och testtäckning för att hitta riskabla kodområden. 
                Ett högt CRAP-värde betyder att en kodbit både är svår och dåligt testad, vilket ökar risken för fel.
            </p>

        <h1>Phpmetrics</h1>
        <img src="{{ asset('img/metrics.png') }}" alt="Metrics" class="simon">
        <p>Varje fil representeras av en cirkel.
        De tre största röda cirklarna är App/Game/Game, App/Controller/LibraryController och App/Controller/GameController,
        Storleken på cirkeln visar hur komplex koden är, och färgen visar hur lätt eller svår koden är att underhålla. 
        Stora, röda cirklar indikerar kod som både är komplex och svår att underhålla vilket tyder på att dessa bör granskas och förbättras.
        Efter en titt inuti Game klassen så kan man ta slutsatsen att klassen är för stor och gör för mycket.
        Klassen har för många beroenden och blir svår att underhålla. En förbättringsmöjlighet kan var att dela upp klasserna i flera mindre.
        </p>

        </div>
    </div>
</div>
{% endblock %}
